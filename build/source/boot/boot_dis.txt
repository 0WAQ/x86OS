
/home/bwb/work/diy-x86os/start/start/build/source/boot/boot.elf：     文件格式 elf32-i386
/home/bwb/work/diy-x86os/start/start/build/source/boot/boot.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00007c00

程序头：
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000b4 memsz 0x000000b4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x00000012 memsz 0x00000012 flags r-x
    LOAD off    0x00000dfe vaddr 0x00007dfe paddr 0x00007dfe align 2**12
         filesz 0x00000002 memsz 0x00000002 flags r-x
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000012  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 boot_end      00000002  00007dfe  00007dfe  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000026  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_info   0000005d  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 00000041  00000000  00000000  00000ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line   00000098  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_frame  00000034  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    00000117  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line_str 000000a8  00000000  00000000  000010eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.obj
00007dfe l       boot_end	00000000 boot_sig
00000000 l    df *ABS*	00000000 boot.c
00007c08 g     F .text	0000000a boot_entry
00007c00 g       .text	00000000 _start
00008000 g       .text	00000000 __bss_start
00008000 g       .text	00000000 _edata
00008000 g       .text	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
  	// 16位代码，务必加上
  	.code16
 	.text
	.global _start
_start:
	mov $0, %eax
    7c00:	66 b8 00 00 00 00    	mov    $0x0,%eax
	jmp .
    7c06:	eb fe                	jmp    7c06 <_start+0x6>

00007c08 <boot_entry>:

/**
 * Boot的C入口函数
 * 只完成一项功能，即从磁盘找到loader文件然后加载到内容中，并跳转过去
 */
void boot_entry(void) {
    7c08:	66 55                	push   %ebp
    7c0a:	66 89 e5             	mov    %esp,%ebp
} 
    7c0d:	90                   	nop
    7c0e:	66 5d                	pop    %ebp
    7c10:	66 c3                	retl

Disassembly of section boot_end:

00007dfe <boot_sig>:
    7dfe:	55                   	push   %bp
    7dff:	aa                   	stos   %al,%es:(%di)
